[
  {
    "objectID": "shiny_exercises_solutions_shinylive.html",
    "href": "shiny_exercises_solutions_shinylive.html",
    "title": "Advanced R for Econometricians: Shiny Exercises Solutions",
    "section": "",
    "text": "Exercise 1: Basic Scatter Plot\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\n\nlibrary(shiny)\nlibrary(gapminder)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(DT)\ntheme_set(theme_light())\n\nui &lt;- fluidPage(\n  titlePanel(\"Gapminder\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"xvar\", \"x-axis\",\n                  choices = c(\"lifeExp\",\"pop\",\"gdpPercap\"),\n                  selected = \"lifeExp\"),\n      selectInput(\"yvar\", \"y-axis\",\n                  choices = c(\"lifeExp\",\"pop\",\"gdpPercap\"),\n                  selected = \"gdpPercap\")\n    ),\n    mainPanel(plotOutput(\"scatterPlot\"))\n  )\n)\n\nserver &lt;- function(input, output) {\n  output$scatterPlot &lt;- renderPlot({\n    ggplot(gapminder, aes_string(x=input$xvar, y=input$yvar)) +\n      geom_point() + expand_limits(x=0,y=0)\n  })\n}\n\nshinyApp(ui, server)\n\n\nExercise 2: Color and Size Mappings\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\n\nui &lt;- fluidPage(\n  titlePanel(\"Gapminder\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"xvar\", \"x-axis\", \n                  choices = names(gapminder)[4:6], selected=\"lifeExp\"),\n      selectInput(\"yvar\", \"y-axis\", \n                  choices = names(gapminder)[4:6], selected=\"gdpPercap\"),\n      selectInput(\"colvar\", \"color by\", \n                  choices = c(\"continent\", names(gapminder)[4:6]), \n                  selected=\"continent\"),\n      selectInput(\"sizevar\", \"size by\", \n                  choices = names(gapminder)[4:6], \n                  selected=\"pop\")\n    ),\n    mainPanel(plotOutput(\"scatterPlot\"))\n  )\n)\n\nserver &lt;- function(input, output) {\n  output$scatterPlot &lt;- renderPlot({\n    ggplot(gapminder, \n           aes_string(\n             x=input$xvar, \n             y=input$yvar,\n             color=input$colvar, \n             size=input$sizevar\n             )\n           ) +\n      geom_point(alpha=0.7) + expand_limits(x=0, y=0)\n  })\n}\n\nshinyApp(ui, server)\n\n\nExercise 3: Year Slider\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\n\nui &lt;- fluidPage(\n  titlePanel(\"Gapminder\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"xvar\", \"x-axis\",\n                  choices=names(gapminder)[4:6], \n                  selected=\"lifeExp\"),\n      selectInput(\"yvar\", \"y-axis\",\n                  choices=names(gapminder)[4:6], selected=\"gdpPercap\"),\n      selectInput(\"colvar\", \"color by\",\n                  choices=c(\"continent\", names(gapminder)[4:6]), \n                  selected=\"continent\"),\n      selectInput(\"sizevar\", \"size by\",\n                  choices=names(gapminder)[4:6],\n                  selected=\"pop\"),\n      sliderInput(\"year\", \"year\",\n                  min=min(gapminder$year), max=max(gapminder$year),\n                  value=min(gapminder$year),\n                  step=5,sep=\"\")\n    ),\n    mainPanel(plotOutput(\"scatterPlot\"))\n  )\n)\n\nserver &lt;- function(input, output) {\n  filteredData &lt;- reactive({\n    gapminder %&gt;% filter(year==input$year)\n  })\n\n  output$scatterPlot &lt;- renderPlot({\n    ggplot(filteredData(), \n           aes_string(\n             x=input$xvar,\n             y=input$yvar,\n             color=input$colvar,\n             size=input$sizevar\n             )\n           ) +\n      geom_point(alpha=0.7) + expand_limits(x=0, y=0) +\n      ggtitle(paste(\"Year:\", input$year))\n  })\n}\n\nshinyApp(ui, server)\n\n\nExercise 4: Action Button\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\n\nui &lt;- fluidPage(\n  titlePanel(\"Gapminder\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"xvar\", \"x-axis\",\n                  choices=names(gapminder)[4:6],selected=\"lifeExp\"),\n      selectInput(\"yvar\", \"y-axis\",\n                  choices=names(gapminder)[4:6], selected=\"gdpPercap\"),\n      selectInput(\"colvar\", \"color by\",\n                  choices=c(\"continent\", names(gapminder)[4:6]), \n                  selected=\"continent\"),\n      selectInput(\"sizevar\", \"size by\",\n                  choices=names(gapminder)[4:6], \n                  selected=\"pop\"),\n      sliderInput(\n        \"year\", \"year\",\n                  min=min(gapminder$year),\n                  max=max(gapminder$year),\n                  value=min(gapminder$year),\n                  step=5,\n                  sep=\"\"\n                  ),\n      actionButton(\"goBtn\",\"Update Plot\")\n    ),\n    mainPanel(plotOutput(\"scatterPlot\"))\n  )\n)\n\nserver &lt;- function(input, output) {\n  dataReactive &lt;- eventReactive(input$goBtn, {\n    gapminder %&gt;% filter(year==input$year)\n  })\n\n  output$scatterPlot &lt;- renderPlot({\n    df &lt;- dataReactive()\n    ggplot(df, aes_string(\n      x=input$xvar, \n      y=input$yvar,\n      color=input$colvar, \n      size=input$sizevar\n    )\n    ) +\n      geom_point(alpha=0.7) + expand_limits(x=0, y=0) +\n      ggtitle(paste(\"Year:\", input$year))\n  })\n}\n\nshinyApp(ui, server)\n\n\nExercise 5: Continent Aggregation\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\n\nui &lt;- fluidPage(\n  titlePanel(\"Gapminder\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"xvar\", \"x-axis\",\n                  choices=names(gapminder)[4:6], selected=\"lifeExp\"),\n      selectInput(\"yvar\", \"y-axis\",\n                  choices=names(gapminder)[4:6], selected=\"gdpPercap\"),\n      selectInput(\"colvar\", \"color by\",\n                  choices=c(\"continent\", names(gapminder)[4:6]), \n                  selected=\"continent\"),\n      selectInput(\"sizevar\", \"size by\",\n                  choices=names(gapminder)[4:6], \n                  selected=\"pop\"),\n      sliderInput(\"year\", \"year\",\n                  min=min(gapminder$year),\n                  max=max(gapminder$year),\n                  value=min(gapminder$year),\n                  step=5,\n                  sep=\"\"\n                  ),\n      checkboxInput(\"aggContinent\",\"Only continents\",FALSE),\n      actionButton(\"goBtn\",\"Update Plot\")\n    ),\n    mainPanel(\n      plotOutput(\"scatterPlot\")\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  aggData &lt;- reactive({\n    req(input$aggContinent)\n    gapminder %&gt;%\n      group_by(continent,year) %&gt;%\n      summarise(lifeExp=mean(lifeExp), pop=sum(pop),\n                gdpPercap=mean(gdpPercap), .groups=\"drop\")\n  })\n\n  plotData &lt;- eventReactive(input$goBtn, {\n    df &lt;- if (input$aggContinent) aggData() else gapminder\n    df &lt;- df %&gt;% filter(year==input$year)\n    title &lt;- if (input$aggContinent)\n      paste(\"Continent summary, Year:\", input$year)\n    else paste(\"Year:\", input$year)\n    list(df=df, title=title)\n  }, ignoreNULL=FALSE)\n\n  output$scatterPlot &lt;- renderPlot({\n    pd &lt;- plotData()\n    ggplot(pd$df, aes_string(\n      x=input$xvar, \n      y=input$yvar,\n      color=input$colvar,\n      size=input$sizevar\n    )\n    ) +\n      geom_point(alpha=0.7) + expand_limits(x=0, y=0) +\n      ggtitle(pd$title)\n  })\n\n}\n\nshinyApp(ui, server)\n\n\nExercise 6: DataTable and Tab Panel\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\n\nui &lt;- fluidPage(\n  titlePanel(\"Gapminder\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"xvar\", \"x-axis\",\n                  choices=names(gapminder)[4:6], selected=\"lifeExp\"),\n      selectInput(\"yvar\", \"y-axis\",\n                  choices=names(gapminder)[4:6], selected=\"gdpPercap\"),\n      selectInput(\"colvar\", \"color by\",\n                  choices=c(\"continent\", names(gapminder)[4:6]), \n                  selected=\"continent\"),\n      selectInput(\"sizevar\", \"size by\",\n                  choices=names(gapminder)[4:6], \n                  selected=\"pop\"),\n      sliderInput(\"year\", \"year\",\n                  min=min(gapminder$year),\n                  max=max(gapminder$year),\n                  value=min(gapminder$year),\n                  step=5,\n                  sep=\"\"\n                  ),\n      checkboxInput(\"aggContinent\",\"Only continents\",FALSE),\n      actionButton(\"goBtn\",\"Update\")\n    ),\n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Plot\", plotOutput(\"scatterPlot\")),\n        tabPanel(\"Table\", DT::dataTableOutput(\"dataTbl\"))\n      )\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  baseData &lt;- reactive({\n    if (input$aggContinent) {\n      gapminder %&gt;% \n        group_by(continent,year) %&gt;% \n        summarise(\n          lifeExp=mean(lifeExp),\n          pop=sum(pop),\n          gdpPercap=mean(gdpPercap),\n          .groups=\"drop\"\n        )\n    } else gapminder\n  })\n\n  plotData &lt;- eventReactive(input$goBtn, {\n    df &lt;- baseData() %&gt;% filter(year==input$year)\n    title &lt;- if (input$aggContinent)\n      paste(\"Continent summary, Year:\", input$year)\n    else paste(\"Year:\", input$year)\n    list(df=df, title=title)\n  }, \n  ignoreNULL=FALSE\n  )\n\n  output$scatterPlot &lt;- renderPlot({\n    pd &lt;- plotData()\n    ggplot(pd$df, aes_string(\n      x=input$xvar,\n      y=input$yvar,\n      color=input$colvar,\n      size=input$sizevar\n    )\n    ) +\n      geom_point(alpha=0.7) + expand_limits(x=0, y=0) + ggtitle(pd$title)\n  })\n\n  output$dataTbl &lt;- DT::renderDataTable({\n    plotData()$df\n  }, options=list(pageLength=10))\n}\n\nshinyApp(ui, server)"
  }
]